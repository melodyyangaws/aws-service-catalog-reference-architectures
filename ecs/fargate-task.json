{
    "Description": "Container Fargate Task Definition (fdp-1qj64b32n)",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "ECRImageURI": {
            "Type": "String",
            "Description" : "Arc Public Docker Image URI - triplai/arc",
            "Default": "triplai/arc:arc_2.12.2_spark_2.4.5_scala_2.12_hadoop_2.9.2_1.0.0"
        },
        "ContainerDefinitionName": {
            "Type": "String",
            "Description" : "This will set the Task and Container Definition name in Fargate.",
            "Default": "arcetl"
        },       
        "ContainerPort": {
            "Type":"Number",
            "Description" : "port number exposed from the Spark container image.",
            "Default":4040
        },
        "ContainerSize": {
            "Type":"String",
            "Description" : "Size of container for Fargate task.",
            "Default":"Small",
            "AllowedValues": ["Small","Medium","Large"]
        },
        "JobTriggerSuffix": {
           "Type":"String",
            "Description" : "Extension name for job config file generated by Jupyter Notebook",
            "Default":"ipynb",
            "AllowedValues": ["ipynb","json"]
        },
        "JobTriggerPreffix": {
           "Type":"String",
            "Description" : "S3 bucket folder name, if you prefer to drop the notebook to a subfolder."
        },
        "DataLakeS3Bucket":{
            "Type":"String",
            "Description" : "The S3 bucket that stores your data to be processed and queried. Change it to an existing bucket in your AWS account.",
            "Default": "arcdemo2020"
        }
    },
   "Mappings" : {
        "MapContainerSize" : {
            "Small" : {
                "cpu" : "2048" ,
                "mem" : "8192"
            },
            "Medium" : {
                "cpu" : "2048",
                "mem" : "16384"
            },
            "Large" : {
                "cpu" : "4096",
                "mem" : "30720"
            }
        }
    },
    "Resources": {
        "JobTriggerServiceBucket": {
          "DependsOn": "s3Permission",
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": {
              "Fn::Sub": ["jobtrigger-${UniqueID}", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]
            },
            "NotificationConfiguration": {
              "LambdaConfigurations": [
                {
                  "Function": {
                    "Fn::GetAtt": ["LambdaTriggerTask","Arn"]
                  },
                  "Event": "s3:ObjectCreated:*",
                  "Filter": {
                    "S3Key": {
                      "Rules": [
                        {
                          "Name": "suffix",
                          "Value": {"Ref": "JobTriggerSuffix"}
                        },
                        {
                          "Name": "prefix",
                          "Value": {"Ref": "JobTriggerPreffix"}
                        }                       
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        "s3Permission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
              "FunctionName": {
                  "Fn::GetAtt": ["LambdaTriggerTask","Arn"]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceAccount": {
                  "Ref": "AWS::AccountId"
              },
              "SourceArn": {
                  "Fn::Sub": ["arn:aws:s3:::jobtrigger-${UniqueID}", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]
              }
            }
        },
        "LambdaTriggerTask":{
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": { "Fn::Sub": "${ContainerDefinitionName}-${AWS::StackName}" },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": ["LambdaExecutionRole","Arn"]
                },
                "Code": {
                    "S3Bucket": {"Ref":"DataLakeS3Bucket"},
                    "S3Key": "app-code/lambda/jobtrigger.js.zip"
                },
                "Runtime": "nodejs10.x",
                "Timeout": 60,
                "Environment": {
                    "Variables": {
                        "CLUSTER_NAME": { "Fn::ImportValue" : "FargateClusterName" },
                        "TASK_ID": {"Ref":"ArcTaskDefinition"},
                        "ETL_CONF_DATALAKE_LOC": {"Ref":"DataLakeS3Bucket"},
                        "subnet_ids": {"Fn::Join": [",", [
                          { "Fn::ImportValue": "ECSPrivateSubnetOne"},
                          { "Fn::ImportValue": "ECSPrivateSubnetTwo"}
                          ]]
                        },
                        "container_name": {"Ref": "ContainerDefinitionName"},
                        "etl_task_sg_id": {"Fn::ImportValue": "ECSFargateContainerSecurityGroup" },
                      }
                }
            }
        },  
        "LambdaExecutionRole": {
           "DependsOn": "ArcTaskDefinition",
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                 "Version": "2012-10-17",
                 "Statement": [
                    {
                       "Effect": "Allow",
                       "Principal": {
                          "Service": [ "lambda.amazonaws.com" ]
                       },
                       "Action": [ "sts:AssumeRole" ]
                    }
                 ]
              },
              "Path": "/",
              "ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
              "Policies": [
                 {
                    "PolicyName": { "Fn::Sub": "lambda_run_ecs-${AWS::StackName}" },
                    "PolicyDocument": {
                       "Version": "2012-10-17",
                       "Statement": [
                          {
                             "Effect": "Allow",
                             "Action": "ecs:RunTask",
                             "Resource": {
                                "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${ContainerDefinitionName}:*"
                             },
                             "Condition": {
                                "ArnLike":{
                                    "ecs:cluster": {
                                      "Fn::Join": ["",["arn:aws:ecs:",{ "Ref": "AWS::Region" },":",{ "Ref": "AWS::AccountId" },":cluster/",{ "Fn::ImportValue" : "FargateClusterName" }]]
                                    }
                                  }
                                }
                           },
                          {
                            "Action": "iam:PassRole",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/*"
                            },
                            "Condition": {"StringLike": {"iam:PassedToService": "ecs-tasks.amazonaws.com"}}
                          }
                       ]
                    }
                 }
              ]
           }
        },
        "S3ECSTaskRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
              "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "ecs-tasks.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  }
               ]
            },
            "Path": "/",
            "Policies": [{
                  "PolicyName": { "Fn::Sub": "ecstask-${AWS::StackName}" },
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Effect": "Allow",
                           "Action": [
                              "s3:ListBucket"
                           ],
                           "Resource": [
                              {"Fn::Sub" : "arn:aws:s3:::${DataLakeS3Bucket}"},
                              {"Fn::Sub": ["arn:aws:s3:::jobtrigger-${UniqueID}", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]}
                            ]
                        },
                        {    
                           "Effect": "Allow",
                           "Action": [
                              "s3:PutObject",
                              "s3:GetObject",
                              "s3:DeleteObject"
                           ],
                           "Resource": [
                              {"Fn::Sub" : "arn:aws:s3:::${DataLakeS3Bucket}/*"},
                              {"Fn::Sub": ["arn:aws:s3:::jobtrigger-${UniqueID}/*", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]}
                          ]
                        }
                     ]
                  }
              }
            ]
          }
        }, 
        "ArcTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ExecutionRoleArn": {"Fn::ImportValue": "ECSTaskExecutionRole"},
                "TaskRoleArn": {"Ref": "S3ECSTaskRole"},
                "RequiresCompatibilities": [
                  "FARGATE"
                ],
                "Memory":  { "Fn::FindInMap" : [ "MapContainerSize", { "Ref" : "ContainerSize" }, "mem"]},
                "Family": {"Ref":"ContainerDefinitionName"},
                "NetworkMode": "awsvpc",
                "Cpu": { "Fn::FindInMap" : [ "MapContainerSize", { "Ref" : "ContainerSize" }, "cpu"]},
                "ContainerDefinitions" : [
                    {
                      "PortMappings": [
                        { "ContainerPort": {"Ref": "ContainerPort"} }
                      ],
                      "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                          "awslogs-group": {"Fn::ImportValue": "ECSETLLogGroup"},
                          "awslogs-region": {"Ref":"AWS::Region"},
                          "awslogs-stream-prefix": "ecs"
                        }
                      },
                      "Command": [
                        "bin/spark-submit",
                        "--master",
                        "local[*]",
                        "--conf",
                        "spark.sql.streaming.checkpointLocation=covid19",
                        "--conf=spark.authenticate=true",
                        "--conf=spark.authenticate.secret=$(openssl rand -hex 64)",
                        "--conf=spark.io.encryption.enabled=true",
                        "--conf=spark.network.crypto.enabled=true",
                        "--conf=spark.sql.parser.quotedRegexColumnNames=true",
                        "--class",
                        "ai.tripl.arc.ARC",
                        "/opt/spark/jars/arc.jar"
                     ],
                     "Environment": [
                        {
                          "Name": "ETL_CONF_ENV",
                          "Value": "dev"
                        },
                        {
                          "Name": "ETL_CONF_JOB_NAME",
                          "Value": "ACIDtest"
                        },
                        {
                          "Name": "ETL_CONF_STREAMING",
                          "Value": "false"
                        },
                        {
                          "Name": "ETL_CONF_TAGS",
                          "Value": "project=ARCdemo cost_center=123456 owner=meloyang"
                        },
                        {
                          "Name": "ETL_CONF_URI",
                          "Value": "s3a://blahblah.json"
                        },
                        {
                          "Name": "ETL_CONF_DATALAKE_LOC",
                          "Value": {"Ref" : "DataLakeS3Bucket"}
                        },
                        {
                          "Name": "ETL_CONF_CURRENT_TIMESTAMP",
                          "Value": "RightNow"
                        }
                      ],
                      "Image": {"Ref":"ECRImageURI"},
                      "Name": {"Ref":"ContainerDefinitionName"}
                    }
                ]
            }
        }
    },
    "Outputs": {
      "S3BucketWithTrigger":{
        "Value": {
            "Fn::Sub" : "s3://${JobTriggerServiceBucket}/${JobTriggerPreffix}" 
        },
        "Description": "Drop your Jupyter notebook to this location to exec ETL"
      },
      "TriggerFunction": {
        "Value": { "Ref":"LambdaTriggerTask"}
      },
     "FargateTaskDefinition": {
        "Value": { "Ref":"ArcTaskDefinition"}
      }
    }
}